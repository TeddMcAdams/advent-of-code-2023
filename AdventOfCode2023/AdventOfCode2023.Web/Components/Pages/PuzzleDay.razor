@page "/day/{dayId:int}"
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@attribute [StreamRendering]

@inject AdventOfCodeApiClient AdventOfCodeApi
@inject NavigationManager NavigationManager

<PageTitle>Day @DayId</PageTitle>

<h1>Day @DayId</h1>

@if (_daysPuzzleData is null)
{
    <p><em>Running puzzles...</em></p>
}
else
{
    <div class="btn-toolbar justify-content-between py-2">
        <div class="btn-group py-2">
            <NavLink class="btn btn-dark advent-of-code-title" href="@(_daysPuzzleData.LinkToAdventOfCodeDay)" target="_blank">
                :: Advent of Code Day @DayId
            </NavLink>
        </div>
        <div class="btn-group py-2">
            <NavLink class="btn btn-secondary" href="@(_daysPuzzleData.LinkToSolutionCode)" target="_blank">
                <i class="bi bi-github mx-2"></i> See my solution in C#
            </NavLink>
        </div>
    </div>

    @* <div class="d-grid gap-2 col-12 col-sm-10 col-md-8 col-lg-6 col-xl-4">
        <NavLink class="btn btn-dark advent-of-code-title" href="@(_daysPuzzleData.LinkToAdventOfCodeDay)" target="_blank">
            :: Advent of Code Day @DayId
        </NavLink>
    </div>
    
    <div class="d-grid gap-2 col-12 col-sm-10 col-md-8 col-lg-6 col-xl-4">
        <NavLink class="btn btn-secondary" href="@(_daysPuzzleData.LinkToSolutionCode)" target="_blank">
            <i class="bi bi-github"></i> See my solution in C# <i class="bi bi-box-arrow-up-right mx-3"></i>
        </NavLink>
    </div> *@

    <div class="card">
        <div class="card-header">
            <ul class="nav nav-tabs card-header-tabs">
                @foreach (var puzzle in _daysPuzzleData.Puzzles)
                {
                    <li class="nav-item">
                        <button class="@(_selectedPuzzle?.Type == puzzle.Type ? "nav-link active" : "nav-link")"
                           @onclick="() => SetSelectedPuzzle(puzzle.Type)"
                           @onclick:preventDefault
                           @onclick:stopPropagation>
                                @puzzle.Name
                        </button>
                    </li>
                }
            </ul>
        </div>
        <PuzzleCardBody PuzzleDetails=_selectedPuzzle />
    </div>
}

@code {
    private AdventOfCodeDay? _daysPuzzleData;
    private Puzzle? _selectedPuzzle;

    [Parameter]
    public int DayId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (_daysPuzzleData is null)
        {
            _daysPuzzleData = await AdventOfCodeApi.GetPuzzleDataForDay(DayId);
            _selectedPuzzle = _daysPuzzleData.Puzzles.FirstOrDefault();
        }
    }

    private void SetSelectedPuzzle(int type)
    {
        if (_daysPuzzleData?.Puzzles is null || !_daysPuzzleData.Puzzles.Any())
        {
            return;
        }
        else
        {
            _selectedPuzzle = _daysPuzzleData.Puzzles.First(m => m.Type == type);
        }
    }
}
